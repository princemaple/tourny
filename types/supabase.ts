/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/tournament": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tournament.id"];
          name?: parameters["rowFilter.tournament.name"];
          description?: parameters["rowFilter.tournament.description"];
          meta?: parameters["rowFilter.tournament.meta"];
          result?: parameters["rowFilter.tournament.result"];
          user_id?: parameters["rowFilter.tournament.user_id"];
          created_at?: parameters["rowFilter.tournament.created_at"];
          updated_at?: parameters["rowFilter.tournament.updated_at"];
          start_at?: parameters["rowFilter.tournament.start_at"];
          end_at?: parameters["rowFilter.tournament.end_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tournament"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tournament */
          tournament?: definitions["tournament"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tournament.id"];
          name?: parameters["rowFilter.tournament.name"];
          description?: parameters["rowFilter.tournament.description"];
          meta?: parameters["rowFilter.tournament.meta"];
          result?: parameters["rowFilter.tournament.result"];
          user_id?: parameters["rowFilter.tournament.user_id"];
          created_at?: parameters["rowFilter.tournament.created_at"];
          updated_at?: parameters["rowFilter.tournament.updated_at"];
          start_at?: parameters["rowFilter.tournament.start_at"];
          end_at?: parameters["rowFilter.tournament.end_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tournament.id"];
          name?: parameters["rowFilter.tournament.name"];
          description?: parameters["rowFilter.tournament.description"];
          meta?: parameters["rowFilter.tournament.meta"];
          result?: parameters["rowFilter.tournament.result"];
          user_id?: parameters["rowFilter.tournament.user_id"];
          created_at?: parameters["rowFilter.tournament.created_at"];
          updated_at?: parameters["rowFilter.tournament.updated_at"];
          start_at?: parameters["rowFilter.tournament.start_at"];
          end_at?: parameters["rowFilter.tournament.end_at"];
        };
        body: {
          /** tournament */
          tournament?: definitions["tournament"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/participant": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.participant.id"];
          name?: parameters["rowFilter.participant.name"];
          tournament_id?: parameters["rowFilter.participant.tournament_id"];
          user_id?: parameters["rowFilter.participant.user_id"];
          created_at?: parameters["rowFilter.participant.created_at"];
          updated_at?: parameters["rowFilter.participant.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["participant"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** participant */
          participant?: definitions["participant"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.participant.id"];
          name?: parameters["rowFilter.participant.name"];
          tournament_id?: parameters["rowFilter.participant.tournament_id"];
          user_id?: parameters["rowFilter.participant.user_id"];
          created_at?: parameters["rowFilter.participant.created_at"];
          updated_at?: parameters["rowFilter.participant.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.participant.id"];
          name?: parameters["rowFilter.participant.name"];
          tournament_id?: parameters["rowFilter.participant.tournament_id"];
          user_id?: parameters["rowFilter.participant.user_id"];
          created_at?: parameters["rowFilter.participant.created_at"];
          updated_at?: parameters["rowFilter.participant.updated_at"];
        };
        body: {
          /** participant */
          participant?: definitions["participant"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/stage": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.stage.id"];
          name?: parameters["rowFilter.stage.name"];
          /** Ordering */
          order?: parameters["order"];
          tournament_id?: parameters["rowFilter.stage.tournament_id"];
          user_id?: parameters["rowFilter.stage.user_id"];
          created_at?: parameters["rowFilter.stage.created_at"];
          updated_at?: parameters["rowFilter.stage.updated_at"];
          type?: parameters["rowFilter.stage.type"];
          default_best_of?: parameters["rowFilter.stage.default_best_of"];
          default_winner_count?: parameters["rowFilter.stage.default_winner_count"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["stage"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** stage */
          stage?: definitions["stage"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.stage.id"];
          name?: parameters["rowFilter.stage.name"];
          order?: parameters["rowFilter.stage.order"];
          tournament_id?: parameters["rowFilter.stage.tournament_id"];
          user_id?: parameters["rowFilter.stage.user_id"];
          created_at?: parameters["rowFilter.stage.created_at"];
          updated_at?: parameters["rowFilter.stage.updated_at"];
          type?: parameters["rowFilter.stage.type"];
          default_best_of?: parameters["rowFilter.stage.default_best_of"];
          default_winner_count?: parameters["rowFilter.stage.default_winner_count"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.stage.id"];
          name?: parameters["rowFilter.stage.name"];
          order?: parameters["rowFilter.stage.order"];
          tournament_id?: parameters["rowFilter.stage.tournament_id"];
          user_id?: parameters["rowFilter.stage.user_id"];
          created_at?: parameters["rowFilter.stage.created_at"];
          updated_at?: parameters["rowFilter.stage.updated_at"];
          type?: parameters["rowFilter.stage.type"];
          default_best_of?: parameters["rowFilter.stage.default_best_of"];
          default_winner_count?: parameters["rowFilter.stage.default_winner_count"];
        };
        body: {
          /** stage */
          stage?: definitions["stage"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/group_participants": {
    get: {
      parameters: {
        query: {
          group_id?: parameters["rowFilter.group_participants.group_id"];
          participant_id?: parameters["rowFilter.group_participants.participant_id"];
          /** Ordering */
          order?: parameters["order"];
          created_at?: parameters["rowFilter.group_participants.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["group_participants"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** group_participants */
          group_participants?: definitions["group_participants"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          group_id?: parameters["rowFilter.group_participants.group_id"];
          participant_id?: parameters["rowFilter.group_participants.participant_id"];
          order?: parameters["rowFilter.group_participants.order"];
          created_at?: parameters["rowFilter.group_participants.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          group_id?: parameters["rowFilter.group_participants.group_id"];
          participant_id?: parameters["rowFilter.group_participants.participant_id"];
          order?: parameters["rowFilter.group_participants.order"];
          created_at?: parameters["rowFilter.group_participants.created_at"];
        };
        body: {
          /** group_participants */
          group_participants?: definitions["group_participants"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/match": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.match.id"];
          group_id?: parameters["rowFilter.match.group_id"];
          stage_id?: parameters["rowFilter.match.stage_id"];
          tournament_id?: parameters["rowFilter.match.tournament_id"];
          left?: parameters["rowFilter.match.left"];
          right?: parameters["rowFilter.match.right"];
          games?: parameters["rowFilter.match.games"];
          result?: parameters["rowFilter.match.result"];
          created_at?: parameters["rowFilter.match.created_at"];
          updated_at?: parameters["rowFilter.match.updated_at"];
          start_at?: parameters["rowFilter.match.start_at"];
          end_at?: parameters["rowFilter.match.end_at"];
          next_match_id?: parameters["rowFilter.match.next_match_id"];
          best_of?: parameters["rowFilter.match.best_of"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["match"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** match */
          match?: definitions["match"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.match.id"];
          group_id?: parameters["rowFilter.match.group_id"];
          stage_id?: parameters["rowFilter.match.stage_id"];
          tournament_id?: parameters["rowFilter.match.tournament_id"];
          left?: parameters["rowFilter.match.left"];
          right?: parameters["rowFilter.match.right"];
          games?: parameters["rowFilter.match.games"];
          result?: parameters["rowFilter.match.result"];
          created_at?: parameters["rowFilter.match.created_at"];
          updated_at?: parameters["rowFilter.match.updated_at"];
          start_at?: parameters["rowFilter.match.start_at"];
          end_at?: parameters["rowFilter.match.end_at"];
          next_match_id?: parameters["rowFilter.match.next_match_id"];
          best_of?: parameters["rowFilter.match.best_of"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.match.id"];
          group_id?: parameters["rowFilter.match.group_id"];
          stage_id?: parameters["rowFilter.match.stage_id"];
          tournament_id?: parameters["rowFilter.match.tournament_id"];
          left?: parameters["rowFilter.match.left"];
          right?: parameters["rowFilter.match.right"];
          games?: parameters["rowFilter.match.games"];
          result?: parameters["rowFilter.match.result"];
          created_at?: parameters["rowFilter.match.created_at"];
          updated_at?: parameters["rowFilter.match.updated_at"];
          start_at?: parameters["rowFilter.match.start_at"];
          end_at?: parameters["rowFilter.match.end_at"];
          next_match_id?: parameters["rowFilter.match.next_match_id"];
          best_of?: parameters["rowFilter.match.best_of"];
        };
        body: {
          /** match */
          match?: definitions["match"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/group": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.group.id"];
          name?: parameters["rowFilter.group.name"];
          /** Ordering */
          order?: parameters["order"];
          tournament_id?: parameters["rowFilter.group.tournament_id"];
          stage_id?: parameters["rowFilter.group.stage_id"];
          user_id?: parameters["rowFilter.group.user_id"];
          created_at?: parameters["rowFilter.group.created_at"];
          updated_at?: parameters["rowFilter.group.updated_at"];
          winner_count?: parameters["rowFilter.group.winner_count"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["group"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** group */
          group?: definitions["group"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.group.id"];
          name?: parameters["rowFilter.group.name"];
          order?: parameters["rowFilter.group.order"];
          tournament_id?: parameters["rowFilter.group.tournament_id"];
          stage_id?: parameters["rowFilter.group.stage_id"];
          user_id?: parameters["rowFilter.group.user_id"];
          created_at?: parameters["rowFilter.group.created_at"];
          updated_at?: parameters["rowFilter.group.updated_at"];
          winner_count?: parameters["rowFilter.group.winner_count"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.group.id"];
          name?: parameters["rowFilter.group.name"];
          order?: parameters["rowFilter.group.order"];
          tournament_id?: parameters["rowFilter.group.tournament_id"];
          stage_id?: parameters["rowFilter.group.stage_id"];
          user_id?: parameters["rowFilter.group.user_id"];
          created_at?: parameters["rowFilter.group.created_at"];
          updated_at?: parameters["rowFilter.group.updated_at"];
          winner_count?: parameters["rowFilter.group.winner_count"];
        };
        body: {
          /** group */
          group?: definitions["group"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  tournament: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    name: string;
    /** Format: text */
    description?: string;
    /** Format: jsonb */
    meta: unknown;
    /** Format: jsonb */
    result?: unknown;
    /** Format: uuid */
    user_id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /** Format: timestamp with time zone */
    start_at?: string;
    /** Format: timestamp with time zone */
    end_at?: string;
  };
  participant: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tournament.id`.<fk table='tournament' column='id'/>
     */
    tournament_id: string;
    /** Format: uuid */
    user_id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
  };
  stage: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    name: string;
    /**
     * Format: integer
     * @default 0
     */
    order: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tournament.id`.<fk table='tournament' column='id'/>
     */
    tournament_id: string;
    /** Format: uuid */
    user_id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /**
     * Format: public.stage_types
     * @enum {string}
     */
    type: "round_robin" | "elimination" | "upper_lower";
    /** Format: smallint */
    default_best_of: number;
    /** Format: smallint */
    default_winner_count: number;
  };
  group_participants: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `group.id`.<fk table='group' column='id'/>
     */
    group_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `participant.id`.<fk table='participant' column='id'/>
     */
    participant_id: string;
    /**
     * Format: integer
     * @default 0
     */
    order: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
  match: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `group.id`.<fk table='group' column='id'/>
     */
    group_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `stage.id`.<fk table='stage' column='id'/>
     */
    stage_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tournament.id`.<fk table='tournament' column='id'/>
     */
    tournament_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `participant.id`.<fk table='participant' column='id'/>
     */
    left?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `participant.id`.<fk table='participant' column='id'/>
     */
    right?: string;
    /** Format: jsonb */
    games?: unknown;
    /** Format: jsonb */
    result?: unknown;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /** Format: timestamp with time zone */
    start_at?: string;
    /** Format: timestamp with time zone */
    end_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `match.id`.<fk table='match' column='id'/>
     */
    next_match_id?: string;
    /** Format: smallint */
    best_of: number;
  };
  group: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    name: string;
    /**
     * Format: integer
     * @default 0
     */
    order: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tournament.id`.<fk table='tournament' column='id'/>
     */
    tournament_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `stage.id`.<fk table='stage' column='id'/>
     */
    stage_id: string;
    /** Format: uuid */
    user_id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /** Format: smallint */
    winner_count: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description tournament */
  "body.tournament": definitions["tournament"];
  /** Format: uuid */
  "rowFilter.tournament.id": string;
  /** Format: character varying */
  "rowFilter.tournament.name": string;
  /** Format: text */
  "rowFilter.tournament.description": string;
  /** Format: jsonb */
  "rowFilter.tournament.meta": string;
  /** Format: jsonb */
  "rowFilter.tournament.result": string;
  /** Format: uuid */
  "rowFilter.tournament.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.tournament.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.tournament.updated_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.tournament.start_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.tournament.end_at": string;
  /** @description participant */
  "body.participant": definitions["participant"];
  /** Format: uuid */
  "rowFilter.participant.id": string;
  /** Format: character varying */
  "rowFilter.participant.name": string;
  /** Format: uuid */
  "rowFilter.participant.tournament_id": string;
  /** Format: uuid */
  "rowFilter.participant.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.participant.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.participant.updated_at": string;
  /** @description stage */
  "body.stage": definitions["stage"];
  /** Format: uuid */
  "rowFilter.stage.id": string;
  /** Format: character varying */
  "rowFilter.stage.name": string;
  /** Format: integer */
  "rowFilter.stage.order": string;
  /** Format: uuid */
  "rowFilter.stage.tournament_id": string;
  /** Format: uuid */
  "rowFilter.stage.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.stage.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.stage.updated_at": string;
  /** Format: public.stage_types */
  "rowFilter.stage.type": string;
  /** Format: smallint */
  "rowFilter.stage.default_best_of": string;
  /** Format: smallint */
  "rowFilter.stage.default_winner_count": string;
  /** @description group_participants */
  "body.group_participants": definitions["group_participants"];
  /** Format: uuid */
  "rowFilter.group_participants.group_id": string;
  /** Format: uuid */
  "rowFilter.group_participants.participant_id": string;
  /** Format: integer */
  "rowFilter.group_participants.order": string;
  /** Format: timestamp with time zone */
  "rowFilter.group_participants.created_at": string;
  /** @description match */
  "body.match": definitions["match"];
  /** Format: uuid */
  "rowFilter.match.id": string;
  /** Format: uuid */
  "rowFilter.match.group_id": string;
  /** Format: uuid */
  "rowFilter.match.stage_id": string;
  /** Format: uuid */
  "rowFilter.match.tournament_id": string;
  /** Format: uuid */
  "rowFilter.match.left": string;
  /** Format: uuid */
  "rowFilter.match.right": string;
  /** Format: jsonb */
  "rowFilter.match.games": string;
  /** Format: jsonb */
  "rowFilter.match.result": string;
  /** Format: timestamp with time zone */
  "rowFilter.match.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.match.updated_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.match.start_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.match.end_at": string;
  /** Format: uuid */
  "rowFilter.match.next_match_id": string;
  /** Format: smallint */
  "rowFilter.match.best_of": string;
  /** @description group */
  "body.group": definitions["group"];
  /** Format: uuid */
  "rowFilter.group.id": string;
  /** Format: character varying */
  "rowFilter.group.name": string;
  /** Format: integer */
  "rowFilter.group.order": string;
  /** Format: uuid */
  "rowFilter.group.tournament_id": string;
  /** Format: uuid */
  "rowFilter.group.stage_id": string;
  /** Format: uuid */
  "rowFilter.group.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.group.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.group.updated_at": string;
  /** Format: smallint */
  "rowFilter.group.winner_count": string;
}

export interface operations {}

export interface external {}
